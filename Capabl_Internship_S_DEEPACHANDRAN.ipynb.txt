{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### **INTRODUCTION**\n",
        "\n",
        "Have you ever wondered how Ola or Uber are able to predict the time the cab will take to reach the destination? The most conventional and widespread idea is to build a model to predict the trip time that a cab would take to reach the destination.\n",
        "\n",
        "Applying Machine Learning techniques for solving these complex business problems will give you the required exposure to this domain. In this problem, we will build an ML model for predicting the ride duration of taxi trips in New York City project.\n",
        "So for each vendoi id, there are certain parameters in an heterogenous data format.\n",
        "So we need to remove outliers to reduce dimension for faster processing, convert all data into suitable format to fit data into model and finally based on metrics, we can conclude that which model gives best accuracy and finally the model can be used to predict trip duration for Test Dataset.\n",
        "\n",
        "The process/Steps involved:\n",
        "\n",
        "* **Data Exploration:** Reading the data and examining the features.\n",
        "* **Data Preprocessing:** Handling missing values, standardizing features, encoding categorical variables.\n",
        "* **Data Visualisation:** Using appropriate visualisations to explore data and gain insights\n",
        "* **Data Modelling:** Performing data modelling using multiple ML Models and comparing the model based on metrics or accuracy to select the best model for prediction.\n",
        "* **Conclusion:** Summarizing the findings and conclusions from the analysis."
      ],
      "metadata": {
        "id": "TcUyS-KYHnNp"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "D6-JaS2f5Wp0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "lsQaF-Pk5W90"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "egieUC7g98wK",
        "outputId": "52406090-c5cc-4163-a29a-0fd6b109890e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "nQw_CNao-bV6"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "\n",
        "# Data working packages\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import math\n",
        "\n",
        "# Feature engineering packages\n",
        "from geopy import distance\n",
        "from datetime import datetime\n",
        "\n",
        "# Graph packages\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A2g4bCPg-gmE"
      },
      "outputs": [],
      "source": [
        "train=pd.read_csv(\"/content/drive/MyDrive/train.csv\",low_memory=False)\n",
        "test=pd.read_csv(\"/content/drive/MyDrive/test.csv\",low_memory=False)\n",
        "df=train"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 337
        },
        "id": "SR-gqQqq-wHp",
        "outputId": "f3972767-dbd2-45a2-e5c6-ae2eb7d5b709"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id  vendor_id      pickup_datetime     dropoff_datetime  \\\n",
              "0  id2875421          2  2016-03-14 17:24:55  2016-03-14 17:32:30   \n",
              "1  id2377394          1  2016-06-12 00:43:35  2016-06-12 00:54:38   \n",
              "2  id3858529          2  2016-01-19 11:35:24  2016-01-19 12:10:48   \n",
              "3  id3504673          2  2016-04-06 19:32:31  2016-04-06 19:39:40   \n",
              "4  id2181028          2  2016-03-26 13:30:55  2016-03-26 13:38:10   \n",
              "\n",
              "   passenger_count  pickup_longitude  pickup_latitude  dropoff_longitude  \\\n",
              "0                1        -73.982155        40.767937         -73.964630   \n",
              "1                1        -73.980415        40.738564         -73.999481   \n",
              "2                1        -73.979027        40.763939         -74.005333   \n",
              "3                1        -74.010040        40.719971         -74.012268   \n",
              "4                1        -73.973053        40.793209         -73.972923   \n",
              "\n",
              "   dropoff_latitude store_and_fwd_flag  trip_duration  \n",
              "0         40.765602                  N            455  \n",
              "1         40.731152                  N            663  \n",
              "2         40.710087                  N           2124  \n",
              "3         40.706718                  N            429  \n",
              "4         40.782520                  N            435  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-b55003ab-ca8d-49b1-b7f1-d2ed6708608d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>vendor_id</th>\n",
              "      <th>pickup_datetime</th>\n",
              "      <th>dropoff_datetime</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>store_and_fwd_flag</th>\n",
              "      <th>trip_duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>id2875421</td>\n",
              "      <td>2</td>\n",
              "      <td>2016-03-14 17:24:55</td>\n",
              "      <td>2016-03-14 17:32:30</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.982155</td>\n",
              "      <td>40.767937</td>\n",
              "      <td>-73.964630</td>\n",
              "      <td>40.765602</td>\n",
              "      <td>N</td>\n",
              "      <td>455</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>id2377394</td>\n",
              "      <td>1</td>\n",
              "      <td>2016-06-12 00:43:35</td>\n",
              "      <td>2016-06-12 00:54:38</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.980415</td>\n",
              "      <td>40.738564</td>\n",
              "      <td>-73.999481</td>\n",
              "      <td>40.731152</td>\n",
              "      <td>N</td>\n",
              "      <td>663</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>id3858529</td>\n",
              "      <td>2</td>\n",
              "      <td>2016-01-19 11:35:24</td>\n",
              "      <td>2016-01-19 12:10:48</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.979027</td>\n",
              "      <td>40.763939</td>\n",
              "      <td>-74.005333</td>\n",
              "      <td>40.710087</td>\n",
              "      <td>N</td>\n",
              "      <td>2124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>id3504673</td>\n",
              "      <td>2</td>\n",
              "      <td>2016-04-06 19:32:31</td>\n",
              "      <td>2016-04-06 19:39:40</td>\n",
              "      <td>1</td>\n",
              "      <td>-74.010040</td>\n",
              "      <td>40.719971</td>\n",
              "      <td>-74.012268</td>\n",
              "      <td>40.706718</td>\n",
              "      <td>N</td>\n",
              "      <td>429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>id2181028</td>\n",
              "      <td>2</td>\n",
              "      <td>2016-03-26 13:30:55</td>\n",
              "      <td>2016-03-26 13:38:10</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.973053</td>\n",
              "      <td>40.793209</td>\n",
              "      <td>-73.972923</td>\n",
              "      <td>40.782520</td>\n",
              "      <td>N</td>\n",
              "      <td>435</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b55003ab-ca8d-49b1-b7f1-d2ed6708608d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-e3885e96-8fcb-4c5f-886c-d2d37bbbc03e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e3885e96-8fcb-4c5f-886c-d2d37bbbc03e')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-e3885e96-8fcb-4c5f-886c-d2d37bbbc03e button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b55003ab-ca8d-49b1-b7f1-d2ed6708608d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b55003ab-ca8d-49b1-b7f1-d2ed6708608d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "train.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "ZEU6PAmz--Vu",
        "outputId": "ba7b90df-807c-42e8-f4c2-e10bd47144c4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id  vendor_id      pickup_datetime  passenger_count  \\\n",
              "0  id3004672          1  2016-06-30 23:59:58                1   \n",
              "1  id3505355          1  2016-06-30 23:59:53                1   \n",
              "2  id1217141          1  2016-06-30 23:59:47                1   \n",
              "3  id2150126          2  2016-06-30 23:59:41                1   \n",
              "4  id1598245          1  2016-06-30 23:59:33                1   \n",
              "\n",
              "   pickup_longitude  pickup_latitude  dropoff_longitude  dropoff_latitude  \\\n",
              "0        -73.988129        40.732029         -73.990173         40.756680   \n",
              "1        -73.964203        40.679993         -73.959808         40.655403   \n",
              "2        -73.997437        40.737583         -73.986160         40.729523   \n",
              "3        -73.956070        40.771900         -73.986427         40.730469   \n",
              "4        -73.970215        40.761475         -73.961510         40.755890   \n",
              "\n",
              "  store_and_fwd_flag  \n",
              "0                  N  \n",
              "1                  N  \n",
              "2                  N  \n",
              "3                  N  \n",
              "4                  N  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-f619bbe4-13b4-42b4-95d5-d2292b6afbe0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>vendor_id</th>\n",
              "      <th>pickup_datetime</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>store_and_fwd_flag</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>id3004672</td>\n",
              "      <td>1</td>\n",
              "      <td>2016-06-30 23:59:58</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.988129</td>\n",
              "      <td>40.732029</td>\n",
              "      <td>-73.990173</td>\n",
              "      <td>40.756680</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>id3505355</td>\n",
              "      <td>1</td>\n",
              "      <td>2016-06-30 23:59:53</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.964203</td>\n",
              "      <td>40.679993</td>\n",
              "      <td>-73.959808</td>\n",
              "      <td>40.655403</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>id1217141</td>\n",
              "      <td>1</td>\n",
              "      <td>2016-06-30 23:59:47</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.997437</td>\n",
              "      <td>40.737583</td>\n",
              "      <td>-73.986160</td>\n",
              "      <td>40.729523</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>id2150126</td>\n",
              "      <td>2</td>\n",
              "      <td>2016-06-30 23:59:41</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.956070</td>\n",
              "      <td>40.771900</td>\n",
              "      <td>-73.986427</td>\n",
              "      <td>40.730469</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>id1598245</td>\n",
              "      <td>1</td>\n",
              "      <td>2016-06-30 23:59:33</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.970215</td>\n",
              "      <td>40.761475</td>\n",
              "      <td>-73.961510</td>\n",
              "      <td>40.755890</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f619bbe4-13b4-42b4-95d5-d2292b6afbe0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-089bef29-d479-4673-87f5-49c5cc8f4904\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-089bef29-d479-4673-87f5-49c5cc8f4904')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-089bef29-d479-4673-87f5-49c5cc8f4904 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f619bbe4-13b4-42b4-95d5-d2292b6afbe0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f619bbe4-13b4-42b4-95d5-d2292b6afbe0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "test.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LQd50BE5-zJp",
        "outputId": "01dddc0d-d53c-4c6d-9a28-d622aabde263"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train data shape:  (1458644, 11) 70 % of whole data\n",
            "Test data shape:  (625134, 9) 30 % of whole data\n"
          ]
        }
      ],
      "source": [
        "print(\"Train data shape: \",train.shape,round(train.shape[0]*100/(train.shape[0]+test.shape[0])),\"% of whole data\")\n",
        "print(\"Test data shape: \",test.shape,round(test.shape[0]*100/(train.shape[0]+test.shape[0])),\"% of whole data\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_zsDR6lro11w",
        "outputId": "26b5475b-e25a-48d3-aed9-021fe7925658"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1458644 entries, 0 to 1458643\n",
            "Data columns (total 11 columns):\n",
            " #   Column              Non-Null Count    Dtype  \n",
            "---  ------              --------------    -----  \n",
            " 0   id                  1458644 non-null  object \n",
            " 1   vendor_id           1458644 non-null  int64  \n",
            " 2   pickup_datetime     1458644 non-null  object \n",
            " 3   dropoff_datetime    1458644 non-null  object \n",
            " 4   passenger_count     1458644 non-null  int64  \n",
            " 5   pickup_longitude    1458644 non-null  float64\n",
            " 6   pickup_latitude     1458644 non-null  float64\n",
            " 7   dropoff_longitude   1458644 non-null  float64\n",
            " 8   dropoff_latitude    1458644 non-null  float64\n",
            " 9   store_and_fwd_flag  1458644 non-null  object \n",
            " 10  trip_duration       1458644 non-null  int64  \n",
            "dtypes: float64(4), int64(3), object(4)\n",
            "memory usage: 122.4+ MB\n"
          ]
        }
      ],
      "source": [
        "train.info()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oyICUKDvo5PL",
        "outputId": "6a95d9a8-b5c7-4b17-f38a-cb801421e403"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 625134 entries, 0 to 625133\n",
            "Data columns (total 9 columns):\n",
            " #   Column              Non-Null Count   Dtype  \n",
            "---  ------              --------------   -----  \n",
            " 0   id                  625134 non-null  object \n",
            " 1   vendor_id           625134 non-null  int64  \n",
            " 2   pickup_datetime     625134 non-null  object \n",
            " 3   passenger_count     625134 non-null  int64  \n",
            " 4   pickup_longitude    625134 non-null  float64\n",
            " 5   pickup_latitude     625134 non-null  float64\n",
            " 6   dropoff_longitude   625134 non-null  float64\n",
            " 7   dropoff_latitude    625134 non-null  float64\n",
            " 8   store_and_fwd_flag  625134 non-null  object \n",
            "dtypes: float64(4), int64(2), object(3)\n",
            "memory usage: 42.9+ MB\n"
          ]
        }
      ],
      "source": [
        "test.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sj7TuQxAAQne"
      },
      "outputs": [],
      "source": [
        "train=train.drop(\"id\",axis=1)\n",
        "test=test.drop(\"id\",axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LbkpQUZMqYWh",
        "outputId": "39f43c92-3e6d-497d-e399-ba5b1ff21fe9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['vendor_id', 'pickup_datetime', 'dropoff_datetime', 'passenger_count',\n",
            "       'pickup_longitude', 'pickup_latitude', 'dropoff_longitude',\n",
            "       'dropoff_latitude', 'store_and_fwd_flag', 'trip_duration'],\n",
            "      dtype='object')\n",
            "Index(['vendor_id', 'pickup_datetime', 'passenger_count', 'pickup_longitude',\n",
            "       'pickup_latitude', 'dropoff_longitude', 'dropoff_latitude',\n",
            "       'store_and_fwd_flag'],\n",
            "      dtype='object')\n"
          ]
        }
      ],
      "source": [
        "print(train.columns)\n",
        "print(test.columns)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0N-hUmeLqzXp"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kXialftHq6_Y"
      },
      "outputs": [],
      "source": [
        "train[\"pickup_datetime\"] = pd.to_datetime(train[\"pickup_datetime\"])\n",
        "train[\"hour\"] = train[\"pickup_datetime\"].dt.hour\n",
        "train[\"minute\"] = train[\"pickup_datetime\"].dt.minute\n",
        "train[\"minute_oftheday\"] = train[\"hour\"] * 60 + train[\"minute\"]\n",
        "train[\"day_week\"] =train[\"pickup_datetime\"].dt.dayofweek\n",
        "train[\"month\"] = train[\"pickup_datetime\"].dt.month\n",
        "\n",
        "test[\"pickup_datetime\"] = pd.to_datetime(test[\"pickup_datetime\"])\n",
        "test[\"hour\"] = test[\"pickup_datetime\"].dt.hour\n",
        "test[\"minute\"] = test[\"pickup_datetime\"].dt.minute\n",
        "test[\"minute_oftheday\"] = test[\"hour\"] * 60 + test[\"minute\"]\n",
        "test[\"day_week\"] =test[\"pickup_datetime\"].dt.dayofweek\n",
        "test[\"month\"] = test[\"pickup_datetime\"].dt.month"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 357
        },
        "id": "4X2DGyT-G1ps",
        "outputId": "a4326788-ab09-43f5-8605-480f0a47f32b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   vendor_id     pickup_datetime     dropoff_datetime  passenger_count  \\\n",
              "0          2 2016-03-14 17:24:55  2016-03-14 17:32:30                1   \n",
              "1          1 2016-06-12 00:43:35  2016-06-12 00:54:38                1   \n",
              "2          2 2016-01-19 11:35:24  2016-01-19 12:10:48                1   \n",
              "3          2 2016-04-06 19:32:31  2016-04-06 19:39:40                1   \n",
              "4          2 2016-03-26 13:30:55  2016-03-26 13:38:10                1   \n",
              "\n",
              "   pickup_longitude  pickup_latitude  dropoff_longitude  dropoff_latitude  \\\n",
              "0        -73.982155        40.767937         -73.964630         40.765602   \n",
              "1        -73.980415        40.738564         -73.999481         40.731152   \n",
              "2        -73.979027        40.763939         -74.005333         40.710087   \n",
              "3        -74.010040        40.719971         -74.012268         40.706718   \n",
              "4        -73.973053        40.793209         -73.972923         40.782520   \n",
              "\n",
              "  store_and_fwd_flag  trip_duration  hour  minute  minute_oftheday  day_week  \\\n",
              "0                  N            455    17      24             1044         0   \n",
              "1                  N            663     0      43               43         6   \n",
              "2                  N           2124    11      35              695         1   \n",
              "3                  N            429    19      32             1172         2   \n",
              "4                  N            435    13      30              810         5   \n",
              "\n",
              "   month  \n",
              "0      3  \n",
              "1      6  \n",
              "2      1  \n",
              "3      4  \n",
              "4      3  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-9b05bf41-1a8b-4d1b-a888-d483d0ab91d0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vendor_id</th>\n",
              "      <th>pickup_datetime</th>\n",
              "      <th>dropoff_datetime</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>store_and_fwd_flag</th>\n",
              "      <th>trip_duration</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>minute_oftheday</th>\n",
              "      <th>day_week</th>\n",
              "      <th>month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>2016-03-14 17:24:55</td>\n",
              "      <td>2016-03-14 17:32:30</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.982155</td>\n",
              "      <td>40.767937</td>\n",
              "      <td>-73.964630</td>\n",
              "      <td>40.765602</td>\n",
              "      <td>N</td>\n",
              "      <td>455</td>\n",
              "      <td>17</td>\n",
              "      <td>24</td>\n",
              "      <td>1044</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2016-06-12 00:43:35</td>\n",
              "      <td>2016-06-12 00:54:38</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.980415</td>\n",
              "      <td>40.738564</td>\n",
              "      <td>-73.999481</td>\n",
              "      <td>40.731152</td>\n",
              "      <td>N</td>\n",
              "      <td>663</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>43</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2016-01-19 11:35:24</td>\n",
              "      <td>2016-01-19 12:10:48</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.979027</td>\n",
              "      <td>40.763939</td>\n",
              "      <td>-74.005333</td>\n",
              "      <td>40.710087</td>\n",
              "      <td>N</td>\n",
              "      <td>2124</td>\n",
              "      <td>11</td>\n",
              "      <td>35</td>\n",
              "      <td>695</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>2016-04-06 19:32:31</td>\n",
              "      <td>2016-04-06 19:39:40</td>\n",
              "      <td>1</td>\n",
              "      <td>-74.010040</td>\n",
              "      <td>40.719971</td>\n",
              "      <td>-74.012268</td>\n",
              "      <td>40.706718</td>\n",
              "      <td>N</td>\n",
              "      <td>429</td>\n",
              "      <td>19</td>\n",
              "      <td>32</td>\n",
              "      <td>1172</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>2016-03-26 13:30:55</td>\n",
              "      <td>2016-03-26 13:38:10</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.973053</td>\n",
              "      <td>40.793209</td>\n",
              "      <td>-73.972923</td>\n",
              "      <td>40.782520</td>\n",
              "      <td>N</td>\n",
              "      <td>435</td>\n",
              "      <td>13</td>\n",
              "      <td>30</td>\n",
              "      <td>810</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b05bf41-1a8b-4d1b-a888-d483d0ab91d0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-9122b4ed-2204-4b1d-98e9-6eedc527c6cc\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9122b4ed-2204-4b1d-98e9-6eedc527c6cc')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-9122b4ed-2204-4b1d-98e9-6eedc527c6cc button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9b05bf41-1a8b-4d1b-a888-d483d0ab91d0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9b05bf41-1a8b-4d1b-a888-d483d0ab91d0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "train.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VJgvLgu9rGnH"
      },
      "outputs": [],
      "source": [
        "train.drop([\"pickup_datetime\",\"dropoff_datetime\"], axis=1, inplace=True)\n",
        "test.drop([\"pickup_datetime\"], axis=1, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lHxjSNkHbWXi"
      },
      "outputs": [],
      "source": [
        "def HaversineDistance(lat1,lon1,lat2,lon2):\n",
        "\t\"\"\"\n",
        "\tReturns the distance between two lat-long cordinates in km\n",
        "\t\"\"\"\n",
        "\tREarth = 6371\n",
        "\tlat = np.abs(np.array(lat1)-np.array(lat2))*np.pi/180\n",
        "\tlon = np.abs(np.array(lon1)-np.array(lon2))*np.pi/180\n",
        "\tlat1 = np.array(lat1)*np.pi/180\n",
        "\tlat2 = np.array(lat2)*np.pi/180\n",
        "\ta = np.sin(lat/2)*np.sin(lat/2)+np.cos(lat1)*np.cos(lat2)*np.sin(lon/2)*np.sin(lon/2)\n",
        "\td = 2*np.arctan2(np.sqrt(a),np.sqrt(1-a))\n",
        "\td = REarth*d\n",
        "\treturn d"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7OchugcMcWBr"
      },
      "outputs": [],
      "source": [
        "train[\"distance\"] = (\n",
        "    HaversineDistance(\n",
        "        train.loc[:, \"pickup_latitude\"], train.loc[:, \"pickup_longitude\"],\n",
        "        train.loc[:, \"dropoff_latitude\"], train.loc[:, \"dropoff_longitude\"]\n",
        "    )\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "enI7FRoxdsLO"
      },
      "outputs": [],
      "source": [
        "test[\"distance\"] = (\n",
        "    HaversineDistance(\n",
        "        test.loc[:, \"pickup_latitude\"], test.loc[:, \"pickup_longitude\"],\n",
        "        test.loc[:, \"dropoff_latitude\"], test.loc[:, \"dropoff_longitude\"]\n",
        "    )\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TxKRfQZJwShB",
        "outputId": "fd574cb7-5a5a-47d1-97a6-6e0746a3d2f7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "N    1450599\n",
            "Y       8045\n",
            "Name: store_and_fwd_flag, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(train.store_and_fwd_flag.value_counts())\n",
        "train[\"store_and_fwd_flag\"].replace({'N':0, 'Y':1}, inplace=True)\n",
        "test[\"store_and_fwd_flag\"].replace({'N':0, 'Y':1}, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "xvo53v4Hzva6",
        "outputId": "a62a5306-4336-4e89-f4a0-c2bfb933025a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          vendor_id  passenger_count  pickup_longitude  pickup_latitude  \\\n",
              "count  1.458644e+06     1.458644e+06      1.458644e+06     1.458644e+06   \n",
              "mean   1.534950e+00     1.664530e+00     -7.397349e+01     4.075092e+01   \n",
              "std    4.987772e-01     1.314242e+00      7.090186e-02     3.288119e-02   \n",
              "min    1.000000e+00     0.000000e+00     -1.219333e+02     3.435970e+01   \n",
              "25%    1.000000e+00     1.000000e+00     -7.399187e+01     4.073735e+01   \n",
              "50%    2.000000e+00     1.000000e+00     -7.398174e+01     4.075410e+01   \n",
              "75%    2.000000e+00     2.000000e+00     -7.396733e+01     4.076836e+01   \n",
              "max    2.000000e+00     9.000000e+00     -6.133553e+01     5.188108e+01   \n",
              "\n",
              "       dropoff_longitude  dropoff_latitude  store_and_fwd_flag  trip_duration  \\\n",
              "count       1.458644e+06      1.458644e+06        1.458644e+06   1.458644e+06   \n",
              "mean       -7.397342e+01      4.075180e+01        5.515396e-03   9.594923e+02   \n",
              "std         7.064327e-02      3.589056e-02        7.406066e-02   5.237432e+03   \n",
              "min        -1.219333e+02      3.218114e+01        0.000000e+00   1.000000e+00   \n",
              "25%        -7.399133e+01      4.073588e+01        0.000000e+00   3.970000e+02   \n",
              "50%        -7.397975e+01      4.075452e+01        0.000000e+00   6.620000e+02   \n",
              "75%        -7.396301e+01      4.076981e+01        0.000000e+00   1.075000e+03   \n",
              "max        -6.133553e+01      4.392103e+01        1.000000e+00   3.526282e+06   \n",
              "\n",
              "               hour        minute  minute_oftheday      day_week  \\\n",
              "count  1.458644e+06  1.458644e+06     1.458644e+06  1.458644e+06   \n",
              "mean   1.360648e+01  2.959016e+01     8.459792e+02  3.050375e+00   \n",
              "std    6.399693e+00  1.732471e+01     3.843181e+02  1.954039e+00   \n",
              "min    0.000000e+00  0.000000e+00     0.000000e+00  0.000000e+00   \n",
              "25%    9.000000e+00  1.500000e+01     5.730000e+02  1.000000e+00   \n",
              "50%    1.400000e+01  3.000000e+01     8.860000e+02  3.000000e+00   \n",
              "75%    1.900000e+01  4.500000e+01     1.168000e+03  5.000000e+00   \n",
              "max    2.300000e+01  5.900000e+01     1.439000e+03  6.000000e+00   \n",
              "\n",
              "              month      distance  \n",
              "count  1.458644e+06  1.458644e+06  \n",
              "mean   3.516818e+00  3.440864e+00  \n",
              "std    1.681038e+00  4.296538e+00  \n",
              "min    1.000000e+00  0.000000e+00  \n",
              "25%    2.000000e+00  1.231837e+00  \n",
              "50%    4.000000e+00  2.093717e+00  \n",
              "75%    5.000000e+00  3.875337e+00  \n",
              "max    6.000000e+00  1.240909e+03  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-765b6d29-7ab0-4993-91ad-45c87bb79d35\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vendor_id</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>store_and_fwd_flag</th>\n",
              "      <th>trip_duration</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>minute_oftheday</th>\n",
              "      <th>day_week</th>\n",
              "      <th>month</th>\n",
              "      <th>distance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "      <td>1.458644e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.534950e+00</td>\n",
              "      <td>1.664530e+00</td>\n",
              "      <td>-7.397349e+01</td>\n",
              "      <td>4.075092e+01</td>\n",
              "      <td>-7.397342e+01</td>\n",
              "      <td>4.075180e+01</td>\n",
              "      <td>5.515396e-03</td>\n",
              "      <td>9.594923e+02</td>\n",
              "      <td>1.360648e+01</td>\n",
              "      <td>2.959016e+01</td>\n",
              "      <td>8.459792e+02</td>\n",
              "      <td>3.050375e+00</td>\n",
              "      <td>3.516818e+00</td>\n",
              "      <td>3.440864e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>4.987772e-01</td>\n",
              "      <td>1.314242e+00</td>\n",
              "      <td>7.090186e-02</td>\n",
              "      <td>3.288119e-02</td>\n",
              "      <td>7.064327e-02</td>\n",
              "      <td>3.589056e-02</td>\n",
              "      <td>7.406066e-02</td>\n",
              "      <td>5.237432e+03</td>\n",
              "      <td>6.399693e+00</td>\n",
              "      <td>1.732471e+01</td>\n",
              "      <td>3.843181e+02</td>\n",
              "      <td>1.954039e+00</td>\n",
              "      <td>1.681038e+00</td>\n",
              "      <td>4.296538e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>-1.219333e+02</td>\n",
              "      <td>3.435970e+01</td>\n",
              "      <td>-1.219333e+02</td>\n",
              "      <td>3.218114e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>-7.399187e+01</td>\n",
              "      <td>4.073735e+01</td>\n",
              "      <td>-7.399133e+01</td>\n",
              "      <td>4.073588e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>3.970000e+02</td>\n",
              "      <td>9.000000e+00</td>\n",
              "      <td>1.500000e+01</td>\n",
              "      <td>5.730000e+02</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>1.231837e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>-7.398174e+01</td>\n",
              "      <td>4.075410e+01</td>\n",
              "      <td>-7.397975e+01</td>\n",
              "      <td>4.075452e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>6.620000e+02</td>\n",
              "      <td>1.400000e+01</td>\n",
              "      <td>3.000000e+01</td>\n",
              "      <td>8.860000e+02</td>\n",
              "      <td>3.000000e+00</td>\n",
              "      <td>4.000000e+00</td>\n",
              "      <td>2.093717e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>-7.396733e+01</td>\n",
              "      <td>4.076836e+01</td>\n",
              "      <td>-7.396301e+01</td>\n",
              "      <td>4.076981e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.075000e+03</td>\n",
              "      <td>1.900000e+01</td>\n",
              "      <td>4.500000e+01</td>\n",
              "      <td>1.168000e+03</td>\n",
              "      <td>5.000000e+00</td>\n",
              "      <td>5.000000e+00</td>\n",
              "      <td>3.875337e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2.000000e+00</td>\n",
              "      <td>9.000000e+00</td>\n",
              "      <td>-6.133553e+01</td>\n",
              "      <td>5.188108e+01</td>\n",
              "      <td>-6.133553e+01</td>\n",
              "      <td>4.392103e+01</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>3.526282e+06</td>\n",
              "      <td>2.300000e+01</td>\n",
              "      <td>5.900000e+01</td>\n",
              "      <td>1.439000e+03</td>\n",
              "      <td>6.000000e+00</td>\n",
              "      <td>6.000000e+00</td>\n",
              "      <td>1.240909e+03</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-765b6d29-7ab0-4993-91ad-45c87bb79d35')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-fa96b612-a033-47b3-87ac-d40fcd0a488b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fa96b612-a033-47b3-87ac-d40fcd0a488b')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-fa96b612-a033-47b3-87ac-d40fcd0a488b button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-765b6d29-7ab0-4993-91ad-45c87bb79d35 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-765b6d29-7ab0-4993-91ad-45c87bb79d35');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "train.describe()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=train['hour']).set_title('hours distribution');"
      ],
      "metadata": {
        "id": "WlSSw6QAMZU5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "8f79da67-36e2-4ecb-80c4-a48281342e39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.barplot(data=train, x='day_week', y='trip_duration', order=[0,1,2,3,4,5]).set(title='Trip duration by weekday');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "JRDqCx5S4avm",
        "outputId": "ec251bc0-8693-4800-b6d0-776bc1777a56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pass1_df = df.groupby(['passenger_count'])[\"id\"].count() # create df and grouping the df by passenger count, counting numberof id's\n",
        "pass2_df = df.reset_index() #resetting the df\n",
        "\n",
        "x=1\n",
        "for i in pass1_df:\n",
        "  print(\"Passenger Count is\",x,\":\",i)\n",
        "  x+=1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5dxmI4I76dsX",
        "outputId": "a4fa50a9-0960-4fd8-c661-98d3540df102"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Passenger Count is 1 : 60\n",
            "Passenger Count is 2 : 1033540\n",
            "Passenger Count is 3 : 210318\n",
            "Passenger Count is 4 : 59896\n",
            "Passenger Count is 5 : 28404\n",
            "Passenger Count is 6 : 78088\n",
            "Passenger Count is 7 : 48333\n",
            "Passenger Count is 8 : 3\n",
            "Passenger Count is 9 : 1\n",
            "Passenger Count is 10 : 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jt35ixJWbUzJ"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "smXpL7xK3eMK",
        "outputId": "58e2803e-75bc-4ae0-d315-a1ba8fe9f4c9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train minimun distance is 0.0 and maximum is 1240908.68 meters\n",
            "Test minimun distance is 0.0 and maximum is 1036043.47 meters\n"
          ]
        }
      ],
      "source": [
        "train['distance'] = train['distance'] * 1000\n",
        "test['distance'] = test['distance'] * 1000\n",
        "\n",
        "# Check the min and max distance in train and test\n",
        "print(\"Train minimun distance is {} and maximum is {} meters\".format(min(train.distance), round(max(train.distance),2)))\n",
        "print(\"Test minimun distance is {} and maximum is {} meters\".format(min(test.distance), round(max(test.distance),2)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 508
        },
        "id": "0V5oeNlK4ylc",
        "outputId": "c4820306-7016-402f-e7b8-be336b72fee0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f68ffc56cb0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_6783a_row0_col0, #T_6783a_row1_col1, #T_6783a_row2_col2, #T_6783a_row3_col3, #T_6783a_row4_col4, #T_6783a_row5_col5, #T_6783a_row6_col6, #T_6783a_row7_col7, #T_6783a_row8_col8, #T_6783a_row8_col10, #T_6783a_row9_col9, #T_6783a_row10_col8, #T_6783a_row10_col10, #T_6783a_row11_col11, #T_6783a_row12_col12, #T_6783a_row13_col13 {\n",
              "  background-color: #b40426;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col1 {\n",
              "  background-color: #9fbfff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row0_col2, #T_6783a_row0_col4, #T_6783a_row2_col1, #T_6783a_row6_col2, #T_6783a_row8_col2, #T_6783a_row9_col7, #T_6783a_row10_col2, #T_6783a_row12_col4 {\n",
              "  background-color: #4257c9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col3, #T_6783a_row9_col3, #T_6783a_row12_col3 {\n",
              "  background-color: #7295f4;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col5, #T_6783a_row9_col5 {\n",
              "  background-color: #6282ea;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col6, #T_6783a_row3_col7, #T_6783a_row3_col13, #T_6783a_row6_col0, #T_6783a_row6_col1, #T_6783a_row8_col4, #T_6783a_row8_col11, #T_6783a_row10_col4, #T_6783a_row10_col11, #T_6783a_row11_col2, #T_6783a_row11_col8, #T_6783a_row11_col10, #T_6783a_row11_col12, #T_6783a_row13_col3, #T_6783a_row13_col5, #T_6783a_row13_col9 {\n",
              "  background-color: #3b4cc0;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col7, #T_6783a_row10_col9 {\n",
              "  background-color: #4961d2;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col8, #T_6783a_row0_col10, #T_6783a_row1_col8, #T_6783a_row1_col10, #T_6783a_row2_col8, #T_6783a_row2_col10, #T_6783a_row3_col8, #T_6783a_row3_col10 {\n",
              "  background-color: #5572df;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col9, #T_6783a_row2_col9, #T_6783a_row4_col9, #T_6783a_row7_col9, #T_6783a_row8_col9, #T_6783a_row12_col9 {\n",
              "  background-color: #3c4ec2;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col11, #T_6783a_row2_col0, #T_6783a_row4_col6, #T_6783a_row5_col0, #T_6783a_row6_col8, #T_6783a_row6_col10, #T_6783a_row7_col8, #T_6783a_row7_col10, #T_6783a_row9_col11, #T_6783a_row13_col0 {\n",
              "  background-color: #536edd;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col12, #T_6783a_row1_col9, #T_6783a_row3_col9, #T_6783a_row5_col7, #T_6783a_row5_col9, #T_6783a_row6_col9, #T_6783a_row8_col12, #T_6783a_row10_col12, #T_6783a_row11_col9 {\n",
              "  background-color: #3d50c3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row0_col13, #T_6783a_row1_col13, #T_6783a_row8_col3, #T_6783a_row10_col3, #T_6783a_row11_col13 {\n",
              "  background-color: #7597f6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row1_col0 {\n",
              "  background-color: #adc9fd;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row1_col2, #T_6783a_row2_col12, #T_6783a_row3_col1, #T_6783a_row4_col12, #T_6783a_row5_col1, #T_6783a_row9_col4, #T_6783a_row12_col1 {\n",
              "  background-color: #3f53c6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row1_col3 {\n",
              "  background-color: #7093f3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row1_col4, #T_6783a_row4_col1, #T_6783a_row7_col12, #T_6783a_row9_col1, #T_6783a_row11_col4, #T_6783a_row12_col2 {\n",
              "  background-color: #4055c8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row1_col5, #T_6783a_row12_col5 {\n",
              "  background-color: #6180e9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row1_col6, #T_6783a_row2_col7, #T_6783a_row3_col11 {\n",
              "  background-color: #4a63d3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row1_col7, #T_6783a_row3_col2, #T_6783a_row7_col4 {\n",
              "  background-color: #455cce;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row1_col11, #T_6783a_row13_col6 {\n",
              "  background-color: #5977e3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row1_col12, #T_6783a_row3_col12, #T_6783a_row5_col12, #T_6783a_row6_col12, #T_6783a_row9_col2, #T_6783a_row9_col12 {\n",
              "  background-color: #3e51c5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row2_col3 {\n",
              "  background-color: #799cf8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row2_col4, #T_6783a_row4_col2 {\n",
              "  background-color: #f08a6c;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row2_col5 {\n",
              "  background-color: #80a3fa;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row2_col6, #T_6783a_row8_col0, #T_6783a_row10_col0, #T_6783a_row13_col11 {\n",
              "  background-color: #5470de;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row2_col11, #T_6783a_row3_col6, #T_6783a_row5_col6, #T_6783a_row12_col11, #T_6783a_row13_col8, #T_6783a_row13_col10 {\n",
              "  background-color: #4e68d8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row2_col13 {\n",
              "  background-color: #bcd2f7;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row3_col0, #T_6783a_row4_col0, #T_6783a_row4_col11, #T_6783a_row7_col6, #T_6783a_row7_col11, #T_6783a_row8_col6, #T_6783a_row9_col8, #T_6783a_row10_col6, #T_6783a_row11_col0, #T_6783a_row12_col6, #T_6783a_row12_col8, #T_6783a_row12_col10 {\n",
              "  background-color: #516ddb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row3_col4, #T_6783a_row8_col5, #T_6783a_row10_col5 {\n",
              "  background-color: #6485ec;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row3_col5 {\n",
              "  background-color: #ead4c8;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row4_col3 {\n",
              "  background-color: #93b5fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row4_col5 {\n",
              "  background-color: #86a9fc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row4_col7, #T_6783a_row7_col2 {\n",
              "  background-color: #465ecf;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row4_col8, #T_6783a_row4_col10, #T_6783a_row5_col11, #T_6783a_row5_col13 {\n",
              "  background-color: #4b64d5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row4_col13 {\n",
              "  background-color: #98b9ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row5_col2, #T_6783a_row6_col5, #T_6783a_row9_col10 {\n",
              "  background-color: #5e7de7;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row5_col3 {\n",
              "  background-color: #efcfbf;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row5_col4 {\n",
              "  background-color: #6788ee;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row5_col8, #T_6783a_row5_col10, #T_6783a_row7_col0 {\n",
              "  background-color: #5673e0;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row6_col3, #T_6783a_row9_col13 {\n",
              "  background-color: #6f92f3;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row6_col4, #T_6783a_row6_col7, #T_6783a_row7_col1, #T_6783a_row8_col1, #T_6783a_row10_col1, #T_6783a_row11_col7, #T_6783a_row13_col12 {\n",
              "  background-color: #4358cb;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row6_col11, #T_6783a_row9_col0, #T_6783a_row9_col6 {\n",
              "  background-color: #506bda;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row6_col13 {\n",
              "  background-color: #7a9df8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row7_col3, #T_6783a_row11_col3 {\n",
              "  background-color: #6a8bef;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row7_col5 {\n",
              "  background-color: #5b7ae5;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row7_col13 {\n",
              "  background-color: #8db0fe;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row8_col7, #T_6783a_row10_col7, #T_6783a_row12_col7, #T_6783a_row13_col1 {\n",
              "  background-color: #445acc;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row8_col13, #T_6783a_row10_col13 {\n",
              "  background-color: #6e90f2;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row11_col1 {\n",
              "  background-color: #485fd1;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row11_col5 {\n",
              "  background-color: #5a78e4;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row11_col6, #T_6783a_row12_col0 {\n",
              "  background-color: #4f69d9;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row12_col13 {\n",
              "  background-color: #7699f6;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row13_col2 {\n",
              "  background-color: #94b6ff;\n",
              "  color: #000000;\n",
              "}\n",
              "#T_6783a_row13_col4 {\n",
              "  background-color: #6b8df0;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "#T_6783a_row13_col7 {\n",
              "  background-color: #5f7fe8;\n",
              "  color: #f1f1f1;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_6783a\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_6783a_level0_col0\" class=\"col_heading level0 col0\" >vendor_id</th>\n",
              "      <th id=\"T_6783a_level0_col1\" class=\"col_heading level0 col1\" >passenger_count</th>\n",
              "      <th id=\"T_6783a_level0_col2\" class=\"col_heading level0 col2\" >pickup_longitude</th>\n",
              "      <th id=\"T_6783a_level0_col3\" class=\"col_heading level0 col3\" >pickup_latitude</th>\n",
              "      <th id=\"T_6783a_level0_col4\" class=\"col_heading level0 col4\" >dropoff_longitude</th>\n",
              "      <th id=\"T_6783a_level0_col5\" class=\"col_heading level0 col5\" >dropoff_latitude</th>\n",
              "      <th id=\"T_6783a_level0_col6\" class=\"col_heading level0 col6\" >store_and_fwd_flag</th>\n",
              "      <th id=\"T_6783a_level0_col7\" class=\"col_heading level0 col7\" >trip_duration</th>\n",
              "      <th id=\"T_6783a_level0_col8\" class=\"col_heading level0 col8\" >hour</th>\n",
              "      <th id=\"T_6783a_level0_col9\" class=\"col_heading level0 col9\" >minute</th>\n",
              "      <th id=\"T_6783a_level0_col10\" class=\"col_heading level0 col10\" >minute_oftheday</th>\n",
              "      <th id=\"T_6783a_level0_col11\" class=\"col_heading level0 col11\" >day_week</th>\n",
              "      <th id=\"T_6783a_level0_col12\" class=\"col_heading level0 col12\" >month</th>\n",
              "      <th id=\"T_6783a_level0_col13\" class=\"col_heading level0 col13\" >distance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row0\" class=\"row_heading level0 row0\" >vendor_id</th>\n",
              "      <td id=\"T_6783a_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row0_col1\" class=\"data row0 col1\" >0.287415</td>\n",
              "      <td id=\"T_6783a_row0_col2\" class=\"data row0 col2\" >0.007820</td>\n",
              "      <td id=\"T_6783a_row0_col3\" class=\"data row0 col3\" >0.001742</td>\n",
              "      <td id=\"T_6783a_row0_col4\" class=\"data row0 col4\" >0.001528</td>\n",
              "      <td id=\"T_6783a_row0_col5\" class=\"data row0 col5\" >0.004496</td>\n",
              "      <td id=\"T_6783a_row0_col6\" class=\"data row0 col6\" >-0.079872</td>\n",
              "      <td id=\"T_6783a_row0_col7\" class=\"data row0 col7\" >0.020304</td>\n",
              "      <td id=\"T_6783a_row0_col8\" class=\"data row0 col8\" >0.009299</td>\n",
              "      <td id=\"T_6783a_row0_col9\" class=\"data row0 col9\" >-0.000388</td>\n",
              "      <td id=\"T_6783a_row0_col10\" class=\"data row0 col10\" >0.009273</td>\n",
              "      <td id=\"T_6783a_row0_col11\" class=\"data row0 col11\" >0.001311</td>\n",
              "      <td id=\"T_6783a_row0_col12\" class=\"data row0 col12\" >-0.006221</td>\n",
              "      <td id=\"T_6783a_row0_col13\" class=\"data row0 col13\" >0.008109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row1\" class=\"row_heading level0 row1\" >passenger_count</th>\n",
              "      <td id=\"T_6783a_row1_col0\" class=\"data row1 col0\" >0.287415</td>\n",
              "      <td id=\"T_6783a_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row1_col2\" class=\"data row1 col2\" >0.002169</td>\n",
              "      <td id=\"T_6783a_row1_col3\" class=\"data row1 col3\" >-0.005125</td>\n",
              "      <td id=\"T_6783a_row1_col4\" class=\"data row1 col4\" >-0.000343</td>\n",
              "      <td id=\"T_6783a_row1_col5\" class=\"data row1 col5\" >-0.002762</td>\n",
              "      <td id=\"T_6783a_row1_col6\" class=\"data row1 col6\" >-0.021815</td>\n",
              "      <td id=\"T_6783a_row1_col7\" class=\"data row1 col7\" >0.008471</td>\n",
              "      <td id=\"T_6783a_row1_col8\" class=\"data row1 col8\" >0.009101</td>\n",
              "      <td id=\"T_6783a_row1_col9\" class=\"data row1 col9\" >0.000961</td>\n",
              "      <td id=\"T_6783a_row1_col10\" class=\"data row1 col10\" >0.009137</td>\n",
              "      <td id=\"T_6783a_row1_col11\" class=\"data row1 col11\" >0.025191</td>\n",
              "      <td id=\"T_6783a_row1_col12\" class=\"data row1 col12\" >-0.002143</td>\n",
              "      <td id=\"T_6783a_row1_col13\" class=\"data row1 col13\" >0.010306</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row2\" class=\"row_heading level0 row2\" >pickup_longitude</th>\n",
              "      <td id=\"T_6783a_row2_col0\" class=\"data row2 col0\" >0.007820</td>\n",
              "      <td id=\"T_6783a_row2_col1\" class=\"data row2 col1\" >0.002169</td>\n",
              "      <td id=\"T_6783a_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row2_col3\" class=\"data row2 col3\" >0.022568</td>\n",
              "      <td id=\"T_6783a_row2_col4\" class=\"data row2 col4\" >0.783582</td>\n",
              "      <td id=\"T_6783a_row2_col5\" class=\"data row2 col5\" >0.100190</td>\n",
              "      <td id=\"T_6783a_row2_col6\" class=\"data row2 col6\" >0.010799</td>\n",
              "      <td id=\"T_6783a_row2_col7\" class=\"data row2 col7\" >0.026542</td>\n",
              "      <td id=\"T_6783a_row2_col8\" class=\"data row2 col8\" >0.010150</td>\n",
              "      <td id=\"T_6783a_row2_col9\" class=\"data row2 col9\" >-0.002597</td>\n",
              "      <td id=\"T_6783a_row2_col10\" class=\"data row2 col10\" >0.010024</td>\n",
              "      <td id=\"T_6783a_row2_col11\" class=\"data row2 col11\" >-0.016356</td>\n",
              "      <td id=\"T_6783a_row2_col12\" class=\"data row2 col12\" >0.004474</td>\n",
              "      <td id=\"T_6783a_row2_col13\" class=\"data row2 col13\" >0.259780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row3\" class=\"row_heading level0 row3\" >pickup_latitude</th>\n",
              "      <td id=\"T_6783a_row3_col0\" class=\"data row3 col0\" >0.001742</td>\n",
              "      <td id=\"T_6783a_row3_col1\" class=\"data row3 col1\" >-0.005125</td>\n",
              "      <td id=\"T_6783a_row3_col2\" class=\"data row3 col2\" >0.022568</td>\n",
              "      <td id=\"T_6783a_row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row3_col4\" class=\"data row3 col4\" >0.114884</td>\n",
              "      <td id=\"T_6783a_row3_col5\" class=\"data row3 col5\" >0.494038</td>\n",
              "      <td id=\"T_6783a_row3_col6\" class=\"data row3 col6\" >-0.008223</td>\n",
              "      <td id=\"T_6783a_row3_col7\" class=\"data row3 col7\" >-0.029204</td>\n",
              "      <td id=\"T_6783a_row3_col8\" class=\"data row3 col8\" >0.010603</td>\n",
              "      <td id=\"T_6783a_row3_col9\" class=\"data row3 col9\" >0.001427</td>\n",
              "      <td id=\"T_6783a_row3_col10\" class=\"data row3 col10\" >0.010658</td>\n",
              "      <td id=\"T_6783a_row3_col11\" class=\"data row3 col11\" >-0.028976</td>\n",
              "      <td id=\"T_6783a_row3_col12\" class=\"data row3 col12\" >-0.001439</td>\n",
              "      <td id=\"T_6783a_row3_col13\" class=\"data row3 col13\" >-0.210354</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row4\" class=\"row_heading level0 row4\" >dropoff_longitude</th>\n",
              "      <td id=\"T_6783a_row4_col0\" class=\"data row4 col0\" >0.001528</td>\n",
              "      <td id=\"T_6783a_row4_col1\" class=\"data row4 col1\" >-0.000343</td>\n",
              "      <td id=\"T_6783a_row4_col2\" class=\"data row4 col2\" >0.783582</td>\n",
              "      <td id=\"T_6783a_row4_col3\" class=\"data row4 col3\" >0.114884</td>\n",
              "      <td id=\"T_6783a_row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row4_col5\" class=\"data row4 col5\" >0.124873</td>\n",
              "      <td id=\"T_6783a_row4_col6\" class=\"data row4 col6\" >0.008226</td>\n",
              "      <td id=\"T_6783a_row4_col7\" class=\"data row4 col7\" >0.014678</td>\n",
              "      <td id=\"T_6783a_row4_col8\" class=\"data row4 col8\" >-0.022455</td>\n",
              "      <td id=\"T_6783a_row4_col9\" class=\"data row4 col9\" >-0.002603</td>\n",
              "      <td id=\"T_6783a_row4_col10\" class=\"data row4 col10\" >-0.022553</td>\n",
              "      <td id=\"T_6783a_row4_col11\" class=\"data row4 col11\" >-0.001130</td>\n",
              "      <td id=\"T_6783a_row4_col12\" class=\"data row4 col12\" >0.004758</td>\n",
              "      <td id=\"T_6783a_row4_col13\" class=\"data row4 col13\" >0.134033</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row5\" class=\"row_heading level0 row5\" >dropoff_latitude</th>\n",
              "      <td id=\"T_6783a_row5_col0\" class=\"data row5 col0\" >0.004496</td>\n",
              "      <td id=\"T_6783a_row5_col1\" class=\"data row5 col1\" >-0.002762</td>\n",
              "      <td id=\"T_6783a_row5_col2\" class=\"data row5 col2\" >0.100190</td>\n",
              "      <td id=\"T_6783a_row5_col3\" class=\"data row5 col3\" >0.494038</td>\n",
              "      <td id=\"T_6783a_row5_col4\" class=\"data row5 col4\" >0.124873</td>\n",
              "      <td id=\"T_6783a_row5_col5\" class=\"data row5 col5\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row5_col6\" class=\"data row5 col6\" >-0.009818</td>\n",
              "      <td id=\"T_6783a_row5_col7\" class=\"data row5 col7\" >-0.020677</td>\n",
              "      <td id=\"T_6783a_row5_col8\" class=\"data row5 col8\" >0.013612</td>\n",
              "      <td id=\"T_6783a_row5_col9\" class=\"data row5 col9\" >0.001961</td>\n",
              "      <td id=\"T_6783a_row5_col10\" class=\"data row5 col10\" >0.013688</td>\n",
              "      <td id=\"T_6783a_row5_col11\" class=\"data row5 col11\" >-0.021762</td>\n",
              "      <td id=\"T_6783a_row5_col12\" class=\"data row5 col12\" >-0.000607</td>\n",
              "      <td id=\"T_6783a_row5_col13\" class=\"data row5 col13\" >-0.142128</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row6\" class=\"row_heading level0 row6\" >store_and_fwd_flag</th>\n",
              "      <td id=\"T_6783a_row6_col0\" class=\"data row6 col0\" >-0.079872</td>\n",
              "      <td id=\"T_6783a_row6_col1\" class=\"data row6 col1\" >-0.021815</td>\n",
              "      <td id=\"T_6783a_row6_col2\" class=\"data row6 col2\" >0.010799</td>\n",
              "      <td id=\"T_6783a_row6_col3\" class=\"data row6 col3\" >-0.008223</td>\n",
              "      <td id=\"T_6783a_row6_col4\" class=\"data row6 col4\" >0.008226</td>\n",
              "      <td id=\"T_6783a_row6_col5\" class=\"data row6 col5\" >-0.009818</td>\n",
              "      <td id=\"T_6783a_row6_col6\" class=\"data row6 col6\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row6_col7\" class=\"data row6 col7\" >0.001724</td>\n",
              "      <td id=\"T_6783a_row6_col8\" class=\"data row6 col8\" >0.002245</td>\n",
              "      <td id=\"T_6783a_row6_col9\" class=\"data row6 col9\" >0.000212</td>\n",
              "      <td id=\"T_6783a_row6_col10\" class=\"data row6 col10\" >0.002252</td>\n",
              "      <td id=\"T_6783a_row6_col11\" class=\"data row6 col11\" >-0.003952</td>\n",
              "      <td id=\"T_6783a_row6_col12\" class=\"data row6 col12\" >0.000403</td>\n",
              "      <td id=\"T_6783a_row6_col13\" class=\"data row6 col13\" >0.026266</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row7\" class=\"row_heading level0 row7\" >trip_duration</th>\n",
              "      <td id=\"T_6783a_row7_col0\" class=\"data row7 col0\" >0.020304</td>\n",
              "      <td id=\"T_6783a_row7_col1\" class=\"data row7 col1\" >0.008471</td>\n",
              "      <td id=\"T_6783a_row7_col2\" class=\"data row7 col2\" >0.026542</td>\n",
              "      <td id=\"T_6783a_row7_col3\" class=\"data row7 col3\" >-0.029204</td>\n",
              "      <td id=\"T_6783a_row7_col4\" class=\"data row7 col4\" >0.014678</td>\n",
              "      <td id=\"T_6783a_row7_col5\" class=\"data row7 col5\" >-0.020677</td>\n",
              "      <td id=\"T_6783a_row7_col6\" class=\"data row7 col6\" >0.001724</td>\n",
              "      <td id=\"T_6783a_row7_col7\" class=\"data row7 col7\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row7_col8\" class=\"data row7 col8\" >0.003690</td>\n",
              "      <td id=\"T_6783a_row7_col9\" class=\"data row7 col9\" >-0.002338</td>\n",
              "      <td id=\"T_6783a_row7_col10\" class=\"data row7 col10\" >0.003582</td>\n",
              "      <td id=\"T_6783a_row7_col11\" class=\"data row7 col11\" >-0.000708</td>\n",
              "      <td id=\"T_6783a_row7_col12\" class=\"data row7 col12\" >0.006607</td>\n",
              "      <td id=\"T_6783a_row7_col13\" class=\"data row7 col13\" >0.094777</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row8\" class=\"row_heading level0 row8\" >hour</th>\n",
              "      <td id=\"T_6783a_row8_col0\" class=\"data row8 col0\" >0.009299</td>\n",
              "      <td id=\"T_6783a_row8_col1\" class=\"data row8 col1\" >0.009101</td>\n",
              "      <td id=\"T_6783a_row8_col2\" class=\"data row8 col2\" >0.010150</td>\n",
              "      <td id=\"T_6783a_row8_col3\" class=\"data row8 col3\" >0.010603</td>\n",
              "      <td id=\"T_6783a_row8_col4\" class=\"data row8 col4\" >-0.022455</td>\n",
              "      <td id=\"T_6783a_row8_col5\" class=\"data row8 col5\" >0.013612</td>\n",
              "      <td id=\"T_6783a_row8_col6\" class=\"data row8 col6\" >0.002245</td>\n",
              "      <td id=\"T_6783a_row8_col7\" class=\"data row8 col7\" >0.003690</td>\n",
              "      <td id=\"T_6783a_row8_col8\" class=\"data row8 col8\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row8_col9\" class=\"data row8 col9\" >-0.003128</td>\n",
              "      <td id=\"T_6783a_row8_col10\" class=\"data row8 col10\" >0.998983</td>\n",
              "      <td id=\"T_6783a_row8_col11\" class=\"data row8 col11\" >-0.084255</td>\n",
              "      <td id=\"T_6783a_row8_col12\" class=\"data row8 col12\" >-0.003438</td>\n",
              "      <td id=\"T_6783a_row8_col13\" class=\"data row8 col13\" >-0.015813</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row9\" class=\"row_heading level0 row9\" >minute</th>\n",
              "      <td id=\"T_6783a_row9_col0\" class=\"data row9 col0\" >-0.000388</td>\n",
              "      <td id=\"T_6783a_row9_col1\" class=\"data row9 col1\" >0.000961</td>\n",
              "      <td id=\"T_6783a_row9_col2\" class=\"data row9 col2\" >-0.002597</td>\n",
              "      <td id=\"T_6783a_row9_col3\" class=\"data row9 col3\" >0.001427</td>\n",
              "      <td id=\"T_6783a_row9_col4\" class=\"data row9 col4\" >-0.002603</td>\n",
              "      <td id=\"T_6783a_row9_col5\" class=\"data row9 col5\" >0.001961</td>\n",
              "      <td id=\"T_6783a_row9_col6\" class=\"data row9 col6\" >0.000212</td>\n",
              "      <td id=\"T_6783a_row9_col7\" class=\"data row9 col7\" >-0.002338</td>\n",
              "      <td id=\"T_6783a_row9_col8\" class=\"data row9 col8\" >-0.003128</td>\n",
              "      <td id=\"T_6783a_row9_col9\" class=\"data row9 col9\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row9_col10\" class=\"data row9 col10\" >0.041954</td>\n",
              "      <td id=\"T_6783a_row9_col11\" class=\"data row9 col11\" >0.000783</td>\n",
              "      <td id=\"T_6783a_row9_col12\" class=\"data row9 col12\" >-0.001066</td>\n",
              "      <td id=\"T_6783a_row9_col13\" class=\"data row9 col13\" >-0.008003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row10\" class=\"row_heading level0 row10\" >minute_oftheday</th>\n",
              "      <td id=\"T_6783a_row10_col0\" class=\"data row10 col0\" >0.009273</td>\n",
              "      <td id=\"T_6783a_row10_col1\" class=\"data row10 col1\" >0.009137</td>\n",
              "      <td id=\"T_6783a_row10_col2\" class=\"data row10 col2\" >0.010024</td>\n",
              "      <td id=\"T_6783a_row10_col3\" class=\"data row10 col3\" >0.010658</td>\n",
              "      <td id=\"T_6783a_row10_col4\" class=\"data row10 col4\" >-0.022553</td>\n",
              "      <td id=\"T_6783a_row10_col5\" class=\"data row10 col5\" >0.013688</td>\n",
              "      <td id=\"T_6783a_row10_col6\" class=\"data row10 col6\" >0.002252</td>\n",
              "      <td id=\"T_6783a_row10_col7\" class=\"data row10 col7\" >0.003582</td>\n",
              "      <td id=\"T_6783a_row10_col8\" class=\"data row10 col8\" >0.998983</td>\n",
              "      <td id=\"T_6783a_row10_col9\" class=\"data row10 col9\" >0.041954</td>\n",
              "      <td id=\"T_6783a_row10_col10\" class=\"data row10 col10\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row10_col11\" class=\"data row10 col11\" >-0.084146</td>\n",
              "      <td id=\"T_6783a_row10_col12\" class=\"data row10 col12\" >-0.003483</td>\n",
              "      <td id=\"T_6783a_row10_col13\" class=\"data row10 col13\" >-0.016160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row11\" class=\"row_heading level0 row11\" >day_week</th>\n",
              "      <td id=\"T_6783a_row11_col0\" class=\"data row11 col0\" >0.001311</td>\n",
              "      <td id=\"T_6783a_row11_col1\" class=\"data row11 col1\" >0.025191</td>\n",
              "      <td id=\"T_6783a_row11_col2\" class=\"data row11 col2\" >-0.016356</td>\n",
              "      <td id=\"T_6783a_row11_col3\" class=\"data row11 col3\" >-0.028976</td>\n",
              "      <td id=\"T_6783a_row11_col4\" class=\"data row11 col4\" >-0.001130</td>\n",
              "      <td id=\"T_6783a_row11_col5\" class=\"data row11 col5\" >-0.021762</td>\n",
              "      <td id=\"T_6783a_row11_col6\" class=\"data row11 col6\" >-0.003952</td>\n",
              "      <td id=\"T_6783a_row11_col7\" class=\"data row11 col7\" >-0.000708</td>\n",
              "      <td id=\"T_6783a_row11_col8\" class=\"data row11 col8\" >-0.084255</td>\n",
              "      <td id=\"T_6783a_row11_col9\" class=\"data row11 col9\" >0.000783</td>\n",
              "      <td id=\"T_6783a_row11_col10\" class=\"data row11 col10\" >-0.084146</td>\n",
              "      <td id=\"T_6783a_row11_col11\" class=\"data row11 col11\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row11_col12\" class=\"data row11 col12\" >-0.014544</td>\n",
              "      <td id=\"T_6783a_row11_col13\" class=\"data row11 col13\" >0.007599</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row12\" class=\"row_heading level0 row12\" >month</th>\n",
              "      <td id=\"T_6783a_row12_col0\" class=\"data row12 col0\" >-0.006221</td>\n",
              "      <td id=\"T_6783a_row12_col1\" class=\"data row12 col1\" >-0.002143</td>\n",
              "      <td id=\"T_6783a_row12_col2\" class=\"data row12 col2\" >0.004474</td>\n",
              "      <td id=\"T_6783a_row12_col3\" class=\"data row12 col3\" >-0.001439</td>\n",
              "      <td id=\"T_6783a_row12_col4\" class=\"data row12 col4\" >0.004758</td>\n",
              "      <td id=\"T_6783a_row12_col5\" class=\"data row12 col5\" >-0.000607</td>\n",
              "      <td id=\"T_6783a_row12_col6\" class=\"data row12 col6\" >0.000403</td>\n",
              "      <td id=\"T_6783a_row12_col7\" class=\"data row12 col7\" >0.006607</td>\n",
              "      <td id=\"T_6783a_row12_col8\" class=\"data row12 col8\" >-0.003438</td>\n",
              "      <td id=\"T_6783a_row12_col9\" class=\"data row12 col9\" >-0.001066</td>\n",
              "      <td id=\"T_6783a_row12_col10\" class=\"data row12 col10\" >-0.003483</td>\n",
              "      <td id=\"T_6783a_row12_col11\" class=\"data row12 col11\" >-0.014544</td>\n",
              "      <td id=\"T_6783a_row12_col12\" class=\"data row12 col12\" >1.000000</td>\n",
              "      <td id=\"T_6783a_row12_col13\" class=\"data row12 col13\" >0.015667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6783a_level0_row13\" class=\"row_heading level0 row13\" >distance</th>\n",
              "      <td id=\"T_6783a_row13_col0\" class=\"data row13 col0\" >0.008109</td>\n",
              "      <td id=\"T_6783a_row13_col1\" class=\"data row13 col1\" >0.010306</td>\n",
              "      <td id=\"T_6783a_row13_col2\" class=\"data row13 col2\" >0.259780</td>\n",
              "      <td id=\"T_6783a_row13_col3\" class=\"data row13 col3\" >-0.210354</td>\n",
              "      <td id=\"T_6783a_row13_col4\" class=\"data row13 col4\" >0.134033</td>\n",
              "      <td id=\"T_6783a_row13_col5\" class=\"data row13 col5\" >-0.142128</td>\n",
              "      <td id=\"T_6783a_row13_col6\" class=\"data row13 col6\" >0.026266</td>\n",
              "      <td id=\"T_6783a_row13_col7\" class=\"data row13 col7\" >0.094777</td>\n",
              "      <td id=\"T_6783a_row13_col8\" class=\"data row13 col8\" >-0.015813</td>\n",
              "      <td id=\"T_6783a_row13_col9\" class=\"data row13 col9\" >-0.008003</td>\n",
              "      <td id=\"T_6783a_row13_col10\" class=\"data row13 col10\" >-0.016160</td>\n",
              "      <td id=\"T_6783a_row13_col11\" class=\"data row13 col11\" >0.007599</td>\n",
              "      <td id=\"T_6783a_row13_col12\" class=\"data row13 col12\" >0.015667</td>\n",
              "      <td id=\"T_6783a_row13_col13\" class=\"data row13 col13\" >1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "#Calculate the correlation matrix\n",
        "corr_matrix = train.corr()\n",
        "\n",
        "#Plot the correlation matrix\n",
        "corr_matrix.style.background_gradient(cmap='coolwarm')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vX4lu4Z94wiN"
      },
      "outputs": [],
      "source": [
        "# remove minute_oftheday\n",
        "\n",
        "train.drop('minute_oftheday', axis=1, inplace=True)\n",
        "test.drop('minute_oftheday', axis=1, inplace=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "W1WkoLYg1tcm",
        "outputId": "24ef6f76-8c20-481c-829a-06a94548ae13"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "count    1.458644e+06\n",
            "mean     9.594923e+02\n",
            "std      5.237432e+03\n",
            "min      1.000000e+00\n",
            "25%      3.970000e+02\n",
            "50%      6.620000e+02\n",
            "75%      1.075000e+03\n",
            "max      3.526282e+06\n",
            "Name: trip_duration, dtype: float64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x400 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "print(train.trip_duration.describe())\n",
        "\n",
        "#filter 1: log2 to trip duration\n",
        "trip_duration_fil1 = train.copy()\n",
        "trip_duration_fil1['trip_duration'] = np.log2(trip_duration_fil1['trip_duration']+1)\n",
        "\n",
        "#calculate mean and standard deviation\n",
        "mean = trip_duration_fil1['trip_duration'].mean()\n",
        "sd = trip_duration_fil1['trip_duration'].std()\n",
        "lower_bound = mean - (3 * sd)\n",
        "upper_bound = mean + (3 * sd)\n",
        "\n",
        "#filter out the outliers (filter 2)\n",
        "trip_duration_fil2 = trip_duration_fil1[(trip_duration_fil1['trip_duration'] > lower_bound) & (trip_duration_fil1['trip_duration'] < upper_bound)]\n",
        "\n",
        "fig, axs = plt.subplots(1, 3, figsize=(20,4))\n",
        "axs[0].hist(train.trip_duration, edgecolor='black')\n",
        "axs[1].hist(trip_duration_fil1.trip_duration, edgecolor='black')\n",
        "axs[2].hist(trip_duration_fil2.trip_duration, edgecolor='black')\n",
        "\n",
        "sns.despine(left=True, bottom=True, ax=axs[0])\n",
        "sns.despine(left=True, bottom=True, ax=axs[1])\n",
        "sns.despine(left=True, bottom=True, ax=axs[2])\n",
        "\n",
        "axs[0].set_title('Original trip duration train data')\n",
        "axs[1].set_title('Log2 to trip duration')\n",
        "axs[2].set_title('Without outliers trip duration')\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "HQA8WlO33UTx",
        "outputId": "49790297-45da-4881-cd94-1c64b56a95ef"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "#convert to log2\n",
        "train_f = train.copy()\n",
        "\n",
        "#calculate mean and standard deviation for train\n",
        "mean = train_f['distance'].mean()\n",
        "sd = train_f['distance'].std()\n",
        "lower_bound = mean - (3 * sd)\n",
        "upper_bound = mean + (3 * sd)\n",
        "#filter out the outliers\n",
        "train_f = train_f[(train_f['distance'] > lower_bound) & (train_f['distance'] < upper_bound)]\n",
        "\n",
        "\n",
        "fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n",
        "train.distance.plot.hist(ax=axes[0], title='Original train distance')\n",
        "\n",
        "train_f.distance.plot.hist(ax=axes[1], title='Distance without outliers train')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 250
        },
        "id": "Jh7Ddxzov3g8",
        "outputId": "c246c53c-22d6-4055-be0d-fe449d781b4f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   vendor_id  passenger_count  pickup_longitude  pickup_latitude  \\\n",
              "0          2                1        -73.982155        40.767937   \n",
              "1          1                1        -73.980415        40.738564   \n",
              "2          2                1        -73.979027        40.763939   \n",
              "3          2                1        -74.010040        40.719971   \n",
              "4          2                1        -73.973053        40.793209   \n",
              "\n",
              "   dropoff_longitude  dropoff_latitude  store_and_fwd_flag  trip_duration  \\\n",
              "0         -73.964630         40.765602                   0            455   \n",
              "1         -73.999481         40.731152                   0            663   \n",
              "2         -74.005333         40.710087                   0           2124   \n",
              "3         -74.012268         40.706718                   0            429   \n",
              "4         -73.972923         40.782520                   0            435   \n",
              "\n",
              "   hour  minute  day_week  month     distance  \n",
              "0    17      24         0      3  1498.520780  \n",
              "1     0      43         6      6  1805.507169  \n",
              "2    11      35         1      1  6385.098495  \n",
              "3    19      32         2      4  1485.498423  \n",
              "4    13      30         5      3  1188.588459  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-e14bba89-4ef1-4b92-8a74-2862ac1125d6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vendor_id</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>store_and_fwd_flag</th>\n",
              "      <th>trip_duration</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>day_week</th>\n",
              "      <th>month</th>\n",
              "      <th>distance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.982155</td>\n",
              "      <td>40.767937</td>\n",
              "      <td>-73.964630</td>\n",
              "      <td>40.765602</td>\n",
              "      <td>0</td>\n",
              "      <td>455</td>\n",
              "      <td>17</td>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1498.520780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.980415</td>\n",
              "      <td>40.738564</td>\n",
              "      <td>-73.999481</td>\n",
              "      <td>40.731152</td>\n",
              "      <td>0</td>\n",
              "      <td>663</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1805.507169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.979027</td>\n",
              "      <td>40.763939</td>\n",
              "      <td>-74.005333</td>\n",
              "      <td>40.710087</td>\n",
              "      <td>0</td>\n",
              "      <td>2124</td>\n",
              "      <td>11</td>\n",
              "      <td>35</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6385.098495</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-74.010040</td>\n",
              "      <td>40.719971</td>\n",
              "      <td>-74.012268</td>\n",
              "      <td>40.706718</td>\n",
              "      <td>0</td>\n",
              "      <td>429</td>\n",
              "      <td>19</td>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1485.498423</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.973053</td>\n",
              "      <td>40.793209</td>\n",
              "      <td>-73.972923</td>\n",
              "      <td>40.782520</td>\n",
              "      <td>0</td>\n",
              "      <td>435</td>\n",
              "      <td>13</td>\n",
              "      <td>30</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>1188.588459</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e14bba89-4ef1-4b92-8a74-2862ac1125d6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-e9bfe36c-742e-40d9-8da6-b8596c18be8d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e9bfe36c-742e-40d9-8da6-b8596c18be8d')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-e9bfe36c-742e-40d9-8da6-b8596c18be8d button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e14bba89-4ef1-4b92-8a74-2862ac1125d6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e14bba89-4ef1-4b92-8a74-2862ac1125d6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "train.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jf3VyHkO_XFi"
      },
      "outputs": [],
      "source": [
        "def remove_outliers(df):\n",
        "  return df[(df['trip_duration'] < 5900) &\n",
        "            (df['passenger_count'] > 0) &\n",
        "            (df['pickup_longitude'] > -100) &\n",
        "            (df['pickup_longitude'] < 50)]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SZdPnz8B_YwB"
      },
      "outputs": [],
      "source": [
        "train=remove_outliers(train)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numerical_cols=['vendor_id', 'passenger_count', 'pickup_longitude', 'pickup_latitude',\n",
        "      'dropoff_longitude', 'dropoff_latitude', 'store_and_fwd_flag', 'hour',\n",
        "       'minute', 'day_week', 'month', 'distance']\n",
        "categorical_cols = ['store_and_fwd_flag', 'vendor_id']"
      ],
      "metadata": {
        "id": "NSLD2Y2c_Xmf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import OneHotEncoder\n",
        "encoder = OneHotEncoder(sparse=False, handle_unknown='ignore').fit(train[categorical_cols])\n",
        "encoded_cols = list(encoder.get_feature_names_out(categorical_cols))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S0VU-MzK_tPF",
        "outputId": "dec0c5e4-5214-4ac1-e66e-42e277f0508f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train[encoded_cols] = encoder.transform(train[categorical_cols])\n",
        "test[encoded_cols] = encoder.transform(test[categorical_cols])"
      ],
      "metadata": {
        "id": "XLBHRGs__583"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "gSaLOGiqCi-I",
        "outputId": "9c7eafac-cf8f-4610-a709-9b90e9aba04b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   vendor_id  passenger_count  pickup_longitude  pickup_latitude  \\\n",
              "0          2                1        -73.982155        40.767937   \n",
              "1          1                1        -73.980415        40.738564   \n",
              "2          2                1        -73.979027        40.763939   \n",
              "3          2                1        -74.010040        40.719971   \n",
              "4          2                1        -73.973053        40.793209   \n",
              "\n",
              "   dropoff_longitude  dropoff_latitude  store_and_fwd_flag  hour  minute  \\\n",
              "0         -73.964630         40.765602                   0    17      24   \n",
              "1         -73.999481         40.731152                   0     0      43   \n",
              "2         -74.005333         40.710087                   0    11      35   \n",
              "3         -74.012268         40.706718                   0    19      32   \n",
              "4         -73.972923         40.782520                   0    13      30   \n",
              "\n",
              "   day_week  month     distance  store_and_fwd_flag_0  store_and_fwd_flag_1  \\\n",
              "0         0      3  1498.520780                   1.0                   0.0   \n",
              "1         6      6  1805.507169                   1.0                   0.0   \n",
              "2         1      1  6385.098495                   1.0                   0.0   \n",
              "3         2      4  1485.498423                   1.0                   0.0   \n",
              "4         5      3  1188.588459                   1.0                   0.0   \n",
              "\n",
              "   vendor_id_1  vendor_id_2  \n",
              "0          0.0          1.0  \n",
              "1          1.0          0.0  \n",
              "2          0.0          1.0  \n",
              "3          0.0          1.0  \n",
              "4          0.0          1.0  "
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-6b05b146-df09-4742-8d74-c1398ff762fc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vendor_id</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>store_and_fwd_flag</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>day_week</th>\n",
              "      <th>month</th>\n",
              "      <th>distance</th>\n",
              "      <th>store_and_fwd_flag_0</th>\n",
              "      <th>store_and_fwd_flag_1</th>\n",
              "      <th>vendor_id_1</th>\n",
              "      <th>vendor_id_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.982155</td>\n",
              "      <td>40.767937</td>\n",
              "      <td>-73.964630</td>\n",
              "      <td>40.765602</td>\n",
              "      <td>0</td>\n",
              "      <td>17</td>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1498.520780</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.980415</td>\n",
              "      <td>40.738564</td>\n",
              "      <td>-73.999481</td>\n",
              "      <td>40.731152</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>1805.507169</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.979027</td>\n",
              "      <td>40.763939</td>\n",
              "      <td>-74.005333</td>\n",
              "      <td>40.710087</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>35</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>6385.098495</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-74.010040</td>\n",
              "      <td>40.719971</td>\n",
              "      <td>-74.012268</td>\n",
              "      <td>40.706718</td>\n",
              "      <td>0</td>\n",
              "      <td>19</td>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1485.498423</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.973053</td>\n",
              "      <td>40.793209</td>\n",
              "      <td>-73.972923</td>\n",
              "      <td>40.782520</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>30</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>1188.588459</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b05b146-df09-4742-8d74-c1398ff762fc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-e2a3dd6f-5244-407a-9968-cdee945efece\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e2a3dd6f-5244-407a-9968-cdee945efece')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-e2a3dd6f-5244-407a-9968-cdee945efece button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6b05b146-df09-4742-8d74-c1398ff762fc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6b05b146-df09-4742-8d74-c1398ff762fc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "\n",
        "features= train[numerical_cols+encoded_cols]\n",
        "target= train.trip_duration\n",
        "\n",
        "X_test = test\n",
        "features.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "teBkGRfSdHLP",
        "outputId": "28b7f067-fbd3-4398-99db-435d518df4d5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         vendor_id  passenger_count  pickup_longitude  pickup_latitude  \\\n",
              "1440952          2                1        -73.963104        40.762924   \n",
              "1302041          1                1        -74.007309        40.727634   \n",
              "1205079          2                1        -73.988838        40.736649   \n",
              "463139           1                1        -73.977158        40.750156   \n",
              "859410           2                1        -74.001259        40.731129   \n",
              "...            ...              ...               ...              ...   \n",
              "1082069          2                1        -73.991913        40.684559   \n",
              "50191            1                1        -73.976326        40.733391   \n",
              "348008           2                1        -73.994682        40.736496   \n",
              "798336           2                1        -73.963181        40.774261   \n",
              "1026985          2                1        -73.986526        40.751953   \n",
              "\n",
              "         dropoff_longitude  dropoff_latitude  store_and_fwd_flag  hour  \\\n",
              "1440952         -73.932365         40.755692                   0     7   \n",
              "1302041         -73.997055         40.725151                   0    11   \n",
              "1205079         -73.988731         40.773899                   0    10   \n",
              "463139          -73.952774         40.769890                   0    15   \n",
              "859410          -73.949272         40.713902                   0     0   \n",
              "...                    ...               ...                 ...   ...   \n",
              "1082069         -73.963654         40.677719                   0    23   \n",
              "50191           -73.991722         40.738506                   0    10   \n",
              "348008          -74.004234         40.740532                   0    13   \n",
              "798336          -73.966850         40.772861                   0     4   \n",
              "1026985         -73.974503         40.756851                   0    16   \n",
              "\n",
              "         minute  day_week  month     distance  store_and_fwd_flag_0  \\\n",
              "1440952      36         2      3  2711.032302                   1.0   \n",
              "1302041      46         2      6   907.120197                   1.0   \n",
              "1205079      55         0      2  4142.078476                   1.0   \n",
              "463139        9         0      2  3005.400673                   1.0   \n",
              "859410        3         4      3  4781.513444                   1.0   \n",
              "...         ...       ...    ...          ...                   ...   \n",
              "1082069      41         1      2  2501.376698                   1.0   \n",
              "50191        10         1      3  1416.435510                   1.0   \n",
              "348008       33         5      3   921.446200                   1.0   \n",
              "798336       23         0      3   346.015853                   1.0   \n",
              "1026985      37         4      5  1149.952691                   1.0   \n",
              "\n",
              "         store_and_fwd_flag_1  vendor_id_1  vendor_id_2  \n",
              "1440952                   0.0          0.0          1.0  \n",
              "1302041                   0.0          1.0          0.0  \n",
              "1205079                   0.0          0.0          1.0  \n",
              "463139                    0.0          1.0          0.0  \n",
              "859410                    0.0          0.0          1.0  \n",
              "...                       ...          ...          ...  \n",
              "1082069                   0.0          0.0          1.0  \n",
              "50191                     0.0          1.0          0.0  \n",
              "348008                    0.0          0.0          1.0  \n",
              "798336                    0.0          0.0          1.0  \n",
              "1026985                   0.0          0.0          1.0  \n",
              "\n",
              "[291191 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-a567656c-e39d-4a77-9fbf-712d0b9fa9b6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vendor_id</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>store_and_fwd_flag</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>day_week</th>\n",
              "      <th>month</th>\n",
              "      <th>distance</th>\n",
              "      <th>store_and_fwd_flag_0</th>\n",
              "      <th>store_and_fwd_flag_1</th>\n",
              "      <th>vendor_id_1</th>\n",
              "      <th>vendor_id_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1440952</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.963104</td>\n",
              "      <td>40.762924</td>\n",
              "      <td>-73.932365</td>\n",
              "      <td>40.755692</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>36</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>2711.032302</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1302041</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-74.007309</td>\n",
              "      <td>40.727634</td>\n",
              "      <td>-73.997055</td>\n",
              "      <td>40.725151</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>46</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>907.120197</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1205079</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.988838</td>\n",
              "      <td>40.736649</td>\n",
              "      <td>-73.988731</td>\n",
              "      <td>40.773899</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>55</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4142.078476</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>463139</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.977158</td>\n",
              "      <td>40.750156</td>\n",
              "      <td>-73.952774</td>\n",
              "      <td>40.769890</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>3005.400673</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>859410</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-74.001259</td>\n",
              "      <td>40.731129</td>\n",
              "      <td>-73.949272</td>\n",
              "      <td>40.713902</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>4781.513444</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1082069</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.991913</td>\n",
              "      <td>40.684559</td>\n",
              "      <td>-73.963654</td>\n",
              "      <td>40.677719</td>\n",
              "      <td>0</td>\n",
              "      <td>23</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2501.376698</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50191</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.976326</td>\n",
              "      <td>40.733391</td>\n",
              "      <td>-73.991722</td>\n",
              "      <td>40.738506</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1416.435510</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>348008</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.994682</td>\n",
              "      <td>40.736496</td>\n",
              "      <td>-74.004234</td>\n",
              "      <td>40.740532</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>33</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>921.446200</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>798336</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.963181</td>\n",
              "      <td>40.774261</td>\n",
              "      <td>-73.966850</td>\n",
              "      <td>40.772861</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>346.015853</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1026985</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.986526</td>\n",
              "      <td>40.751953</td>\n",
              "      <td>-73.974503</td>\n",
              "      <td>40.756851</td>\n",
              "      <td>0</td>\n",
              "      <td>16</td>\n",
              "      <td>37</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>1149.952691</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>291191 rows × 16 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a567656c-e39d-4a77-9fbf-712d0b9fa9b6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-968485f1-9b22-4f82-8bff-67e2fde30b13\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-968485f1-9b22-4f82-8bff-67e2fde30b13')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-968485f1-9b22-4f82-8bff-67e2fde30b13 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a567656c-e39d-4a77-9fbf-712d0b9fa9b6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a567656c-e39d-4a77-9fbf-712d0b9fa9b6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "XTr,XTe,YTr,YTe=train_test_split(features,target,test_size=0.2)\n",
        "XTe"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UD2VCmX9HL9B",
        "outputId": "53abf616-1c19-48d0-b620-4855ecd3afc6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[644, 867, 807, 963, 1184, 746, 650, 1570, 1329]\n",
            "[1298, 1211, 779, 1128, 2007, 974, 536, 1558, 1885]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.linear_model import Ridge, RidgeCV, Lasso\n",
        "from sklearn.metrics import classification_report,accuracy_score\n",
        "#Ridge Regression Model\n",
        "model = Ridge(alpha=1, random_state=42)\n",
        "\n",
        "a=model.fit(XTr,YTr)\n",
        "u=a.predict(XTe)\n",
        "x=[int(i) for i in a.predict(XTe)]\n",
        "y=[int(i) for i in np.array(YTe)]\n",
        "print(x[1:10])\n",
        "print(y[1:10])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lwi-1XVr3EYj",
        "outputId": "2aa8a2fb-7ef3-445a-afd1-e067f171fe89"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean_absolute_Error:  299.2023551552074\n",
            "Root_Mean_squared_Error:  429.92425904953075\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import mean_squared_error,mean_absolute_error\n",
        "print(\"Mean_absolute_Error: \",mean_absolute_error(x,y))\n",
        "print(\"Root_Mean_squared_Error: \",np.sqrt(mean_squared_error(x,y)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Bl_l1pY_-el_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d4550da0-7785-45f4-912f-4b9be8b23c35"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[644, 867, 807, 963, 1184, 746, 650, 1570, 1329]\n",
            "[1298, 1211, 779, 1128, 2007, 974, 536, 1558, 1885]\n"
          ]
        }
      ],
      "source": [
        "model=Lasso(alpha=10,random_state=42)\n",
        "mod=model.fit(XTr,YTr)\n",
        "u=a.predict(XTe)\n",
        "x=[int(i) for i in a.predict(XTe)]\n",
        "y=[int(i) for i in np.array(YTe)]\n",
        "print(x[1:10])\n",
        "print(y[1:10])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "unheMIyK3b_e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2bb4663c-7b3f-427d-ba28-05589fce8e97"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean_absolute_Error:  299.2023551552074\n",
            "Root_Mean_squared_Error:  429.92425904953075\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import mean_squared_error,mean_absolute_error\n",
        "print(\"Mean_absolute_Error: \",mean_absolute_error(x,y))\n",
        "print(\"Root_Mean_squared_Error: \",np.sqrt(mean_squared_error(x,y)))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model=RidgeCV()\n",
        "a=model.fit(XTr,YTr)\n",
        "u=a.predict(XTe)\n",
        "x=[int(i) for i in a.predict(XTe)]\n",
        "y=[int(i) for i in np.array(YTe)]\n",
        "print(x[1:10])\n",
        "print(y[1:10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TZjqDIGKKPtS",
        "outputId": "d3b48764-37ec-4f89-a7fc-94457ab019d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[644, 867, 807, 963, 1183, 746, 651, 1570, 1328]\n",
            "[1298, 1211, 779, 1128, 2007, 974, 536, 1558, 1885]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error,mean_absolute_error\n",
        "print(\"Mean_absolute_Error: \",mean_absolute_error(x,y))\n",
        "print(\"Root_Mean_squared_Error: \",np.sqrt(mean_squared_error(x,y)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8FWr7DWPKvbd",
        "outputId": "cc1a4621-05cc-40d6-8f21-61377c84f213"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean_absolute_Error:  299.3000127064367\n",
            "Root_Mean_squared_Error:  429.9695659130193\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "So from the above metrics Lasso and Ridge Regression has lowest MAE and RMSE error. So we can select the Lasso model for prediction"
      ],
      "metadata": {
        "id": "16Ye_FjG2Z_M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "j=mod.predict(X_test)"
      ],
      "metadata": {
        "id": "_AaoWMSF2ZAJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test[\"Predicted_Trip_Duration\"]=j\n",
        "test[\"Predicted_Trip_Duration\"]=round(test[\"Predicted_Trip_Duration\"],2)"
      ],
      "metadata": {
        "id": "IVdMofDWC4Z4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2=pd.read_csv(\"/content/drive/MyDrive/test.csv\",low_memory=False)"
      ],
      "metadata": {
        "id": "wWCVcw2PDQfR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test[\"id\"]=df2[\"id\"]"
      ],
      "metadata": {
        "id": "YIlWp6idC_4x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "p9z65JHgDfHK",
        "outputId": "9e3b599a-b987-44c7-842b-cc85f466f1d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        vendor_id  passenger_count  pickup_longitude  pickup_latitude  \\\n",
              "0               1                1        -73.988129        40.732029   \n",
              "1               1                1        -73.964203        40.679993   \n",
              "2               1                1        -73.997437        40.737583   \n",
              "3               2                1        -73.956070        40.771900   \n",
              "4               1                1        -73.970215        40.761475   \n",
              "...           ...              ...               ...              ...   \n",
              "625129          1                1        -74.003464        40.725105   \n",
              "625130          1                1        -74.006363        40.743782   \n",
              "625131          1                2        -73.972267        40.759865   \n",
              "625132          1                1        -73.976501        40.733562   \n",
              "625133          2                2        -73.981850        40.716881   \n",
              "\n",
              "        dropoff_longitude  dropoff_latitude  store_and_fwd_flag  hour  minute  \\\n",
              "0              -73.990173         40.756680                   0    23      59   \n",
              "1              -73.959808         40.655403                   0    23      59   \n",
              "2              -73.986160         40.729523                   0    23      59   \n",
              "3              -73.986427         40.730469                   0    23      59   \n",
              "4              -73.961510         40.755890                   0    23      59   \n",
              "...                   ...               ...                 ...   ...     ...   \n",
              "625129         -74.001251         40.733643                   0     0       2   \n",
              "625130         -73.953407         40.782467                   0     0       1   \n",
              "625131         -73.876602         40.748665                   0     0       1   \n",
              "625132         -73.854263         40.891788                   0     0       0   \n",
              "625133         -73.969330         40.769379                   0     0       0   \n",
              "\n",
              "        day_week  month      distance  store_and_fwd_flag_0  \\\n",
              "0              3      6   2746.425821                   1.0   \n",
              "1              3      6   2759.238933                   1.0   \n",
              "2              3      6   1306.155390                   1.0   \n",
              "3              3      6   5269.087741                   1.0   \n",
              "4              3      6    960.841827                   1.0   \n",
              "...          ...    ...           ...                   ...   \n",
              "625129         4      1    967.437533                   1.0   \n",
              "625130         4      1   6196.343392                   1.0   \n",
              "625131         4      1   8153.719184                   1.0   \n",
              "625132         4      1  20380.748298                   1.0   \n",
              "625133         4      1   5932.019241                   1.0   \n",
              "\n",
              "        store_and_fwd_flag_1  vendor_id_1  vendor_id_2  \\\n",
              "0                        0.0          1.0          0.0   \n",
              "1                        0.0          1.0          0.0   \n",
              "2                        0.0          1.0          0.0   \n",
              "3                        0.0          0.0          1.0   \n",
              "4                        0.0          1.0          0.0   \n",
              "...                      ...          ...          ...   \n",
              "625129                   0.0          1.0          0.0   \n",
              "625130                   0.0          1.0          0.0   \n",
              "625131                   0.0          1.0          0.0   \n",
              "625132                   0.0          1.0          0.0   \n",
              "625133                   0.0          0.0          1.0   \n",
              "\n",
              "        Predicted_Trip_Duration         id  \n",
              "0                        830.98  id3004672  \n",
              "1                        832.32  id3505355  \n",
              "2                        681.08  id1217141  \n",
              "3                       1093.55  id2150126  \n",
              "4                        645.13  id1598245  \n",
              "...                         ...        ...  \n",
              "625129                   484.89  id3008929  \n",
              "625130                  1029.27  id3700764  \n",
              "625131                  1233.00  id2568735  \n",
              "625132                  2505.77  id1384355  \n",
              "625133                  1001.90  id0621643  \n",
              "\n",
              "[625134 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-d4cd425f-8823-47c0-bd54-490fb6a6dc41\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>vendor_id</th>\n",
              "      <th>passenger_count</th>\n",
              "      <th>pickup_longitude</th>\n",
              "      <th>pickup_latitude</th>\n",
              "      <th>dropoff_longitude</th>\n",
              "      <th>dropoff_latitude</th>\n",
              "      <th>store_and_fwd_flag</th>\n",
              "      <th>hour</th>\n",
              "      <th>minute</th>\n",
              "      <th>day_week</th>\n",
              "      <th>month</th>\n",
              "      <th>distance</th>\n",
              "      <th>store_and_fwd_flag_0</th>\n",
              "      <th>store_and_fwd_flag_1</th>\n",
              "      <th>vendor_id_1</th>\n",
              "      <th>vendor_id_2</th>\n",
              "      <th>Predicted_Trip_Duration</th>\n",
              "      <th>id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.988129</td>\n",
              "      <td>40.732029</td>\n",
              "      <td>-73.990173</td>\n",
              "      <td>40.756680</td>\n",
              "      <td>0</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2746.425821</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>830.98</td>\n",
              "      <td>id3004672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.964203</td>\n",
              "      <td>40.679993</td>\n",
              "      <td>-73.959808</td>\n",
              "      <td>40.655403</td>\n",
              "      <td>0</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>2759.238933</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>832.32</td>\n",
              "      <td>id3505355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.997437</td>\n",
              "      <td>40.737583</td>\n",
              "      <td>-73.986160</td>\n",
              "      <td>40.729523</td>\n",
              "      <td>0</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>1306.155390</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>681.08</td>\n",
              "      <td>id1217141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.956070</td>\n",
              "      <td>40.771900</td>\n",
              "      <td>-73.986427</td>\n",
              "      <td>40.730469</td>\n",
              "      <td>0</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>5269.087741</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1093.55</td>\n",
              "      <td>id2150126</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.970215</td>\n",
              "      <td>40.761475</td>\n",
              "      <td>-73.961510</td>\n",
              "      <td>40.755890</td>\n",
              "      <td>0</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>3</td>\n",
              "      <td>6</td>\n",
              "      <td>960.841827</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>645.13</td>\n",
              "      <td>id1598245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>625129</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-74.003464</td>\n",
              "      <td>40.725105</td>\n",
              "      <td>-74.001251</td>\n",
              "      <td>40.733643</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>967.437533</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>484.89</td>\n",
              "      <td>id3008929</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>625130</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-74.006363</td>\n",
              "      <td>40.743782</td>\n",
              "      <td>-73.953407</td>\n",
              "      <td>40.782467</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>6196.343392</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1029.27</td>\n",
              "      <td>id3700764</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>625131</th>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>-73.972267</td>\n",
              "      <td>40.759865</td>\n",
              "      <td>-73.876602</td>\n",
              "      <td>40.748665</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>8153.719184</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1233.00</td>\n",
              "      <td>id2568735</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>625132</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>-73.976501</td>\n",
              "      <td>40.733562</td>\n",
              "      <td>-73.854263</td>\n",
              "      <td>40.891788</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>20380.748298</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2505.77</td>\n",
              "      <td>id1384355</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>625133</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>-73.981850</td>\n",
              "      <td>40.716881</td>\n",
              "      <td>-73.969330</td>\n",
              "      <td>40.769379</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5932.019241</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1001.90</td>\n",
              "      <td>id0621643</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>625134 rows × 18 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4cd425f-8823-47c0-bd54-490fb6a6dc41')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-620d1745-a156-46ac-a205-c0714cb7ca59\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-620d1745-a156-46ac-a205-c0714cb7ca59')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-620d1745-a156-46ac-a205-c0714cb7ca59 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d4cd425f-8823-47c0-bd54-490fb6a6dc41 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d4cd425f-8823-47c0-bd54-490fb6a6dc41');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test[[\"id\",\"Predicted_Trip_Duration\"]].head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "NHihmwZ4DkWv",
        "outputId": "f6d7d04a-f8d6-4945-b291-619d38c96861"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          id  Predicted_Trip_Duration\n",
              "0  id3004672                   830.98\n",
              "1  id3505355                   832.32\n",
              "2  id1217141                   681.08\n",
              "3  id2150126                  1093.55\n",
              "4  id1598245                   645.13\n",
              "5  id0668992                   980.85\n",
              "6  id1765014                   910.73\n",
              "7  id0898117                   855.39\n",
              "8  id3905224                  2507.46\n",
              "9  id1543102                   734.70"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-2a1a197a-0e98-4cbe-b40b-fe73889793e9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>Predicted_Trip_Duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>id3004672</td>\n",
              "      <td>830.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>id3505355</td>\n",
              "      <td>832.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>id1217141</td>\n",
              "      <td>681.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>id2150126</td>\n",
              "      <td>1093.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>id1598245</td>\n",
              "      <td>645.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>id0668992</td>\n",
              "      <td>980.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>id1765014</td>\n",
              "      <td>910.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>id0898117</td>\n",
              "      <td>855.39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>id3905224</td>\n",
              "      <td>2507.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>id1543102</td>\n",
              "      <td>734.70</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a1a197a-0e98-4cbe-b40b-fe73889793e9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-08c2a485-e97a-4058-8437-a6644d394fc3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08c2a485-e97a-4058-8437-a6644d394fc3')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-08c2a485-e97a-4058-8437-a6644d394fc3 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2a1a197a-0e98-4cbe-b40b-fe73889793e9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2a1a197a-0e98-4cbe-b40b-fe73889793e9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **SUMMARY**\n",
        " After data visualisation and preprocessing, we have seperated data into numerical and categorical data and all categorical datas are one hot encoded.\n",
        " Finally, the train data is splitted into training and testing data and are fitted into each model and calculated error rate using\n",
        "\n",
        "*   MAE (Mean Absolute Error)\n",
        "*   RMSE (Root Mean Square Error)\n",
        "\n",
        "From the error rate, we came to know that Lasso and Ridge regression shows same error rate but lesser than RidgeCV. So I choosed Lasso Model and finally the trip duration is calculated for test dataset.\n",
        "\n",
        "Therefore, trip duration is predicted with the model which has best accuracy score and finally we predicted trip  duration for test dataset and hence our project is completed sucessfully.\n",
        "\n"
      ],
      "metadata": {
        "id": "3vTMOoh0ZmQj"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}